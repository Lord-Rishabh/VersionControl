To check status for your project. Use : git status
There are 4 stages : 
    1. Untracked
    2. Unmodified
    3. Modified
    4. Staged(committed)

For converting file from stage 1 to 2. Use : git add fileName

To commit a file, follow this steps : 
1. git commit
2. A vim editor will open. Then press 'i'
3. Type your commit message
4. Press ESC and type ':wq'.
Note : Before committing a file, we need to add it using git add, then only we can commit
       a file.

You can make a file using : touch fileName
To add all the files use : git add -A   ;Use capital A only

If we modify a file after adding it, then git status will show modified file. Also this
modification is not added. To add them use : git add fileName .

To commit directly use : git commit -m "commitMessage". Here also modified file will not
get committed until it is added using above command.
Now, To commit without adding file to staging area 
use : git commit -a -m "Skipped staging area"


If you want to see all commits that you made use : git log. In case you want to see last
3 commits use : git log -p -3. Use arrow keys to see next commit and press q to quit
this log.

To compare the modified file with tracked(added) file we need to use : git diff.
To compare the last tracked(added) file with last commit use : git diff --staged.

To check status with short message. Use : git status -s
green M : file is modified in staging area.
red M : file is modified in working directory.

To make hide or if you don't wanna track a file, make a fileusing : touch .gitignore ,
don't make file without git.
To ignore a file just type it's name in gitignore.
To ignore a file only in root directory use : /fileName   in gitignore.
To ignore all files of similar extension type use : *.extensionName    in gitignore.
To ignore a whole folder use: folderName/    in gitignore.

To discard changes and change your file to last commit use : git checkout fileName
To discard changes and change all files to last commit use : git checkout -f
To discard changes in working directory and change your file to staging
    area use : git checkout -- fileName 

Branches :-
To create a new branch use : git branch branchName
To see all the created branch use : git branch
To switch to a particular branch use : git checkout branchName
To create a branch and switch to it directly use : git branch -b branchName
To merge a branch to current branch use : git merge feature1

GitHub :-
To add variable named origin and pass your repository link to
     it use : git remote add origin repositoryURL
Now, If you want to remove this use : git remote rm origin
To update origin use : git remote set-url origin repositoryURL
To push changes to GitHub use : git push -u origin master  
Note : Push changes to your repository for first time requires ssh key.
Note : '-u' in above command is used so that, if after this you write only: git push,
        then by default it will be pushed to master branch.

Git clone :-
To clone a github repository use : git clone repositoryURL folderName , if you don't 
    specify folderName then by default folderName will be repositoryName
